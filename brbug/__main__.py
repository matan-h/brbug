try:
    import rich_click as click
except ModuleNotFoundError:
    import click
import os
import tarfile
try:
    import toml
except ModuleNotFoundError:
    toml = None
import subprocess
# some functions generated by ChatGPT. 

def create_tar_gz(source_folder:str, output_filename:str):
    """
    Create a .tar.gz file from .py files in specified source folder.

    Args:
    - source_folder (str): Path to the folder containing python files to be archived.
    - output_filename (str): Name of the output .tar.gz file.
    """
    files = [f for f in os.listdir(source_folder) if os.path.isfile(os.path.join(source_folder, f)) and f.endswith('.py')]
    with tarfile.open(output_filename, 'w:gz') as tar:
        for file in files:
            file_path = os.path.join(source_folder, file)
            tar.add(file_path, arcname=os.path.basename(file_path))

def get_output_from_source(source_folder:str)->str:
    return os.path.join(source_folder,"resources",'_brbug.tar.gz')

@click.command()
@click.option('--config', '-c', type=click.Path(exists=True), help='Path to the TOML config file.',default=None)
@click.option('--source', '-s', type=click.Path(exists=True), help='Manually specify a source folder.')
@click.option('--output', '-o', type=click.Path(exists=False), help='Manually specify an output tar filename.')
@click.option('--disable-run','-X', is_flag=True, default=False, help='Disable running the briefcase command.')
@click.option('--device', '-d', type=str, help='Set the briefcase device.')
@click.option('--run-type', '-T', type=str, help='Set the briefcase runner type.',default='android')
def create_tar_from_config(config:str, source:str, output:str,disable_run:bool, device:str,run_type='android'):
    """
    Create a tarball archive from the python files in a source folder or a configuration file.

    If a configuration file is provided, it should be in TOML format and contain a 'tool.briefcase.app.*.sources' key.

    If a source folder is provided directly, a tarball will be created from that folder.

    By default, the command also runs the 'briefcase run' command after creating the tarball. Use the '--disable-run'/'-X'
    option to skip running the 'briefcase run' command.
    """
    if config is None:
        if os.path.exists("pyproject.toml"):
            config = "pyproject.toml"
    if config:
        if not toml:
            raise ModuleNotFoundError("please install the toml module to use a toml config file")
        # Load the configuration from the provided TOML file
        try:
            config_data = toml.load(config)
            sources = next(iter(config_data["tool"]["briefcase"]["app"].items()))[1]["sources"]

            for source_folder in sources:
                if not output:
                    output = get_output_from_source(source_folder)
                if os.path.exists(source_folder):
                    create_tar_gz(source_folder, output)
                    click.echo(f"Created {output} from {source_folder}")
                else:
                    click.echo(f"Folder {source_folder} does not exist.")
        except KeyError:
            click.echo("Invalid configuration file format. Please provide a valid TOML file (by default 'pyproject.toml') with 'tool.briefcase.app.*.sources' key.")
            return
    elif source:
        if os.path.exists(source):
            if not output:
                output = get_output_from_source(source)
            create_tar_gz(source, output)
            click.echo(f"Created {output} from {source}")
        else:
            click.echo(f"Folder {source} does not exist.")
            return
    else:
        click.echo("Please provide either a configuration file (-c/--config) or a source folder (-s/--source).")
        return
    ### 
    if not disable_run:
        subprocess.call(["briefcase","run",run_type,"-u",*(['-d',device] if device else [])])
    

def main():
    create_tar_from_config()
if __name__ == '__main__':
    main()